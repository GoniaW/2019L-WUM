knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
library(visdat)
library(DataExplorer)
library(kableExtra)
library(scales)
require(gridExtra)
library(funModeling)
library(forcats)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
library(visdat)
library(DataExplorer)
library(kableExtra)
library(scales)
require(gridExtra)
library(funModeling)
library(forcats)
library(DALEX)
dat <- data("titanic")
dat
dat <- data(titanic)
dat
dat <- titanic
dat
dat$age <- as.integer(dat$age)
dat
dat$survived <- as.factor(dat$survived)
dat$class <- as.factor(dat$class)
dat
library(dplyr)
library(mlr)
library(ggplot2)
dat <- titanic
dat$age <- as.integer(dat$age)
dat$survived <- as.factor(dat$survived)
dat$class <- as.factor(dat$class)
summarizeColumns(dat)
dim(dat)
indexes <- sample(nrow(dat), frac = 0.2)
indexes <- sample(1:nrow(dat), frac = 0.2)
indexes <- sample_frac(1:nrow(dat), 0.2)
indexes <- sample_frac(dat, 0.2)
head(indexes)
datTest <- sample_frac(dat, 0.2)
datTrain <- setdiff(dat, datTest)
nrow(datTrain)
nrow(datTest)
nrow(dat)
dat <- titanic
dat$age <- as.integer(dat$age)
dat$survived <- as.factor(dat$survived)
dat$class <- as.factor(dat$class)
summarizeColumns(dat)
datTest <- sample_frac(dat, 0.2)
datTrain <- setdiff(dat, datTest)
nrow(datTest)
nrow(datTrain)
nrow(dat)
datTest <- sample_frac(nrow(dat), 0.2)
datTest <- sample(nrow(dat), size = 0.2*nrow(dat))
TestInx <- sample(nrow(dat), size = 0.2*nrow(dat))
TrainInx <- select(1:nrow(dat), -TestInx)
TrainInx <- 1:nrow(dat)[-TestInx]
TrainInx
TestInx <- sample(nrow(dat), size = 0.2*nrow(dat))
TestInx
TrainInx
dat[-TestInx,]
datTrain <- dat[-TestInx,]
datTest <- dat[TestInx,]
nrow(datTrain)
nrow(datTest)
classifTask1 <- makeClassifTask(id = "rf1", data = datTrain, target = "survived")
classifLrn1 <- makeLearner("classif.ranger", predict.type = "response", par.vals = list(num.trees = 983,
replace = FALSE,
sample.fraction = 0.703,
mtry = 0.257 * 8,
respect.unordered.factors = FALSE,
min.node.size = 1))
classifLrn1 <- makeLearner("classif.ranger", predict.type = "response", par.vals = list(num.trees = 983,
replace = FALSE,
sample.fraction = 0.703,
mtry = floor(0.257 * 8),
respect.unordered.factors = FALSE,
min.node.size = 1))
classifLrn1 <- makeLearner("classif.ranger", predict.type = "response", par.vals = list(num.trees = 983,
replace = FALSE,
sample.fraction = 0.703,
mtry = floor(0.257 * 8),
respect.unordered.factors = 'ignore',
min.node.size = 1))
trained <- train(classifLrn1, classifTask1)
datTrain <- na.omin(datTrain)
datTrain <- na.omit(datTrain)
datTest <- na.omit(datTest)
dim(datTrain)
dim(datTest)
trained <- train(classifLrn1, classifTask1)
classifTask1 <- makeClassifTask(id = "rf1", data = datTrain, target = "survived")
classifLrn1 <- makeLearner("classif.ranger", predict.type = "response", par.vals = list(num.trees = 983,
replace = FALSE,
sample.fraction = 0.703,
mtry = floor(0.257 * 8),
respect.unordered.factors = 'ignore',
min.node.size = 1))
trained <- train(classifLrn1, classifTask1)
pred <- predict(trained, newdata = datTest)
performance(pred, measures = list(acc, auc))
classifLrn1 <- makeLearner("classif.ranger", predict.type = "prob", par.vals = list(num.trees = 983,
replace = FALSE,
sample.fraction = 0.703,
mtry = floor(0.257 * 8),
respect.unordered.factors = 'ignore',
min.node.size = 1))
trained <- train(classifLrn1, classifTask1)
pred <- predict(trained, newdata = datTest)
performance(pred, measures = list(acc, auc))
classifTask1 <- makeClassifTask(id = "rf1", data = datTrain, target = "survived")
classifLrn1 <- makeLearner("classif.ranger", predict.type = "prob", par.vals = list(num.trees = 983,
replace = FALSE,
sample.fraction = 0.703,
mtry = floor(0.257 * 8),
respect.unordered.factors = 'ignore',
min.node.size = 1))
trained <- train(classifLrn1, classifTask1)
pred <- predict(trained, newdata = datTest)
performance(pred, measures = list(acc, auc))
performance(pred, measures = list(acc, auc))
rfPms <- makeParamSet(
makeIntegerParam("num.trees", lower = 1, upper = 5000, trafo = function(x) x),
makeLogicalParam("replace"),
makeNumericParam("sample.fraction", lower = 0.1, upper = 1, trafo = function(x) x),
makeNumericParam("mtry", lower = 0, upper = 8, trafo = function(x) 8*x),
makeLogicalParam("respect.unordered.factors"),
makeNumericParam("min.node.size", lower = 0, upper = 1, function(x) nrow(datTrain)^x))
classifTask3 <- makeClassifTask(id = "rf1", data = datTrain, target = "survived")
classifLrn3 <- makeLearner("classif.ranger", predict.type = "prob")
cv <- makeResampleDesc("CV", iters = 5L)
ctrlRandom <- makeTuneControlRandom(maxit = 100L)
rfPms <- makeParamSet(
makeIntegerParam("num.trees", lower = 1, upper = 5000, trafo = function(x) x),
makeLogicalParam("replace"),
makeNumericParam("sample.fraction", lower = 0.1, upper = 1, trafo = function(x) x),
makeNumericParam("mtry", lower = 0, upper = 8, trafo = function(x) 8*x),
makeLogicalParam("respect.unordered.factors"),
makeNumericParam("min.node.size", lower = 0, upper = 1, function(x) (nrow(datTrain))^x))
rfRes <- tuneParams(classifLrn3, task = classifTask3, measures = list(acc, auc), resampling = cv, par.set = rfPms, control = ctrlRandom)
rfPms <- makeParamSet(
makeIntegerParam("num.trees", lower = 1, upper = 5000, trafo = function(x) x),
makeLogicalParam("replace"),
makeNumericParam("sample.fraction", lower = 0.1, upper = 1, trafo = function(x) x),
makeNumericParam("mtry", lower = 0, upper = 8, trafo = function(x) 8*x),
makeLogicalParam("respect.unordered.factors"),
makeNumericParam("min.node.size", lower = 0, upper = 1, function(x) 2^x))
rfRes <- tuneParams(classifLrn3, task = classifTask3, measures = list(acc, auc), resampling = cv, par.set = rfPms, control = ctrlRandom)
rfPms <- makeParamSet(
makeIntegerParam("num.trees", lower = 1, upper = 5000, trafo = function(x) x),
makeLogicalParam("replace"),
makeNumericParam("sample.fraction", lower = 0.1, upper = 1, trafo = function(x) x),
makeNumericParam("mtry", lower = 0, upper = 8, trafo = function(x) 8*x),
makeLogicalParam("respect.unordered.factors"),
makeNumericParam("min.node.size", lower = 0, upper = 1, trafo = function(x) 2^x))
rfRes <- tuneParams(classifLrn3, task = classifTask3, measures = list(acc, auc), resampling = cv, par.set = rfPms, control = ctrlRandom)
rfPms <- makeParamSet(
makeIntegerParam("num.trees", lower = 1, upper = 5000, trafo = function(x) x),
makeLogicalParam("replace"),
makeNumericParam("sample.fraction", lower = 0.1, upper = 1, trafo = function(x) x),
makeNumericParam("mtry", lower = 0, upper = 8, trafo = function(x) floor(8*x)),
makeCharacterParam("respect.unordered.factors", c("order", "ignore")),
makeNumericParam("min.node.size", lower = 0, upper = 1, trafo = function(x) 2^x))
rfPms <- makeParamSet(
makeIntegerParam("num.trees", lower = 1, upper = 5000, trafo = function(x) x),
makeLogicalParam("replace"),
makeNumericParam("sample.fraction", lower = 0.1, upper = 1, trafo = function(x) x),
makeNumericParam("mtry", lower = 0, upper = 8, trafo = function(x) floor(8*x)),
makeDiscreteParam("respect.unordered.factors", values = c("order", "ignore")),
makeNumericParam("min.node.size", lower = 0, upper = 1, trafo = function(x) 2^x))
rfPms <- makeParamSet(
makeIntegerParam("num.trees", lower = 1, upper = 5000, trafo = function(x) x),
makeLogicalParam("replace"),
makeNumericParam("sample.fraction", lower = 0.1, upper = 1, trafo = function(x) x),
makeNumericParam("mtry", lower = 0, upper = 8, trafo = function(x) floor(8*x)),
makeDiscreteParam("respect.unordered.factors", values = c("order", "ignore")),
makeNumericParam("min.node.size", lower = 0, upper = 1, trafo = function(x) floor(nrow(datTrain)^x)))
install.packages("rpart.plot")
trained2$learner.model
classifTask2 <- makeClassifTask(id = "rf1", data = datTrain, target = "survived")
classifLrn2 <- makeLearner("classif.ranger", predict.type = "prob")
trained2 <- train(classifLrn2, classifTask2)
pred2 <- predict(trained2, newdata = datTest)
performance(pred2, measures = list(acc, auc))
library(rpart.plot)
rpart.plot(trained2$learner.model)
plot(trained2)
plot(trained2$learner)
plot(trained2$learner.model)
plotPartialDependence(trained2)
genDat <- generatePartialDependenceData(trained2)
install.packages("mmpf")
genDat <- generatePartialDependenceData(trained2)
genDat <- generatePartialDependenceData(trained2, input = datTest)
plotPartialDependence(trained2)
plotPartialDependence(genDat)
classifLrn6 <- makeLearner("classif.randomForest", predict.type = "prob")
helpLearnerParam("classif.randomForest")
